services:
  # PostgreSQL Database for Airflow metadata
  postgres:
    image: postgres:17
    container_name: oer-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_PORT: 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 10
    restart: unless-stopped

  # MinIO Object Storage (for data lakehouse)
  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: oer-minio
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Iceberg REST Catalog - Đơn giản thay thế Hive Metastore
  iceberg-rest:
    build:
      context: ./lakehouse/iceberg-rest
      dockerfile: Dockerfile
    container_name: oer-iceberg-rest
    ports:
      - "8181:8181"
    environment:
      # Catalog configuration
      CATALOG_WAREHOUSE: s3a://oer-lakehouse/
      CATALOG_URI: jdbc:postgresql://postgres:5432/iceberg
      CATALOG_JDBC_USER: iceberg
      CATALOG_JDBC_PASSWORD: iceberg
      # Hadoop FileSystem configuration for S3A
      CATALOG_IO__IMPL: org.apache.iceberg.hadoop.HadoopFileIO
      # S3A Hadoop configuration (phải dùng CATALOG_ prefix cho Iceberg REST)
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_S3_PATH__STYLE__ACCESS: "true"
      CATALOG_S3_ACCESS__KEY__ID: minioadmin
      CATALOG_S3_SECRET__ACCESS__KEY: minioadmin
      # Hadoop fs.s3a.* properties so HadoopFileIO picks them up
      CATALOG_FS__S3A__ENDPOINT: http://minio:9000
      CATALOG_FS__S3A__PATH__STYLE__ACCESS: "true"
      CATALOG_FS__S3A__CONNECTION__SSL__ENABLED: "false"
      CATALOG_FS__S3A__ACCESS__KEY: minioadmin
      CATALOG_FS__S3A__SECRET__KEY: minioadmin
      # CATALOG_FS__S3A__AWS__CREDENTIALS__PROVIDER: org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
      # NOTE: Biến AWS_* bên dưới KHÔNG kết nối tới AWS Cloud!
      # S3A client của Hadoop BẮT BUỘC phải có các biến này (legacy design)
      # Chúng chỉ chứa credentials cho MinIO (S3-compatible local storage)
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # Jupyter Notebook for Data Exploration  
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: oer-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      # Connect to Spark cluster
      - SPARK_MASTER=spark://spark-master:7077
    volumes:
      - ./lakehouse/airflow/notebooks:/home/jovyan/notebooks
      - ./lakehouse/airflow/dags:/home/jovyan/workflows
      - ./lakehouse/airflow/src:/home/jovyan/oer_project
    depends_on:
      - minio
      - spark-master
    restart: unless-stopped
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"

  # Airflow Scraper
  oer-scraper:
    build:
      context: ./lakehouse/airflow
      dockerfile: Dockerfile
    container_name: oer-airflow-scraper
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      spark-master:
        condition: service_healthy
      iceberg-rest:
        condition: service_started
    ports:
      - "8080:8080"
    volumes:
      - ./lakehouse/data/scraped:/opt/airflow/scraped_data
      - ./lakehouse/data:/opt/airflow/database
      - ./lakehouse/data/logs:/opt/airflow/logs
      - ./lakehouse/airflow/dags:/opt/airflow/dags
      - ./lakehouse/airflow/src:/opt/airflow/src
      - ./lakehouse/data/spark:/opt/airflow/spark_data
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AIRFLOW__CORE__PARALLELISM=8
      - AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG=1
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags
      # MinIO configuration for lakehouse storage
      - MINIO_ENABLE=1
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=0
      - MINIO_BUCKET=oer-lakehouse
      # Bronze layer PDF processing configuration
      - DOWNLOAD_STRATEGY=selective
      - MAX_PDF_SIZE_MB=20
      - IMPORTANT_CATEGORIES=lecture_notes,textbook,handout,reading
      - SKIP_CATEGORIES=exam,assignment,quiz
      # Spark cluster configuration
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_HOME=/opt/spark
      - PYSPARK_PYTHON=/usr/local/bin/python
      # Optional: download and upload PDFs for OTL
      - OTL_DOWNLOAD_PDFS=0
      - PDF_DOWNLOAD_PATH=/opt/airflow/scraped_pdfs/otl
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Spark Master
  spark-master:
    build:
      context: ./lakehouse/spark
      dockerfile: Dockerfile
    container_name: oer-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8081:8080" # Spark Master Web UI
      - "7077:7077" # Spark Master Port
    volumes:
      - ./lakehouse/data/spark:/data/spark
      - ./lakehouse/data/iceberg-jars:/opt/spark/jars/iceberg
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spark Worker
  spark-worker:
    build:
      context: ./lakehouse/spark
      dockerfile: Dockerfile
    container_name: oer-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8082:8081" # Spark Worker Web UI
    volumes:
      - ./lakehouse/data/spark:/data/spark
      - ./lakehouse/data/iceberg-jars:/opt/spark/jars/iceberg
    depends_on:
      - spark-master
    restart: unless-stopped

volumes:
  scraped_data:
  database:
  logs:
  dags:
  postgres_data:
  minio_data:
  spark_data:
  notebooks:
